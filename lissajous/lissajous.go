// Lissajous generates GIF animations of random Lissajous figures.
package lissajous

import (
	"image"
	"image/color"
	"image/gif"
	"io"
	"math"
	"math/rand"
//	"os"
)

var palette = []color.Color{
	color.RGBA{0xff, 0xff, 0xff, 0xff},
	color.RGBA{0x48, 0x61, 0x6c, 0xff},
	color.RGBA{0xf6, 0x54, 0x6a, 0xff},
	color.RGBA{0x00, 0x7f, 0xff, 0xff},
	color.RGBA{0xba, 0x3e, 0x3e, 0xff},
	color.RGBA{0x00, 0xc6, 0xd2, 0xff},
	color.RGBA{0x83, 0x9d, 0x57, 0xff},
	color.RGBA{0xf0, 0x4d, 0x4c, 0xff},
	color.RGBA{0xff, 0x00, 0x00, 0xff},
	color.RGBA{0xf6, 0x54, 0x6a, 0xff},
	color.RGBA{0x48, 0x61, 0x6c, 0xff},
	color.RGBA{0xff, 0x5a, 0x5a, 0xff},
	color.RGBA{0x50, 0x79, 0x72, 0xff},
	color.RGBA{0x96, 0x92, 0xb2, 0xff},
	color.RGBA{0xd2, 0x99, 0xa4, 0xff},
	color.RGBA{0xf9, 0xc7, 0xd1, 0xff},
	color.RGBA{0xff, 0x5a, 0x5a, 0xff},
	color.RGBA{0xff, 0xa6, 0x4c, 0xff},
	color.RGBA{0xee, 0xda, 0xb3, 0xff},
	color.RGBA{0x6d, 0x61, 0x69, 0xff},
	color.RGBA{0x50, 0x79, 0x72, 0xff},
	color.RGBA{0x48, 0x61, 0x6c, 0xff},
	color.RGBA{0x20, 0x1b, 0xc1, 0xff},
	color.RGBA{0x20, 0x1b, 0xc1, 0xff},
	color.RGBA{0x92, 0x29, 0x6d, 0xff},
	color.RGBA{0xfd, 0x9e, 0x81, 0xff},
	color.RGBA{0x93, 0xc0, 0xff, 0xff},
	color.RGBA{0xff, 0xfc, 0xb9, 0xff},
	color.RGBA{0xd6, 0xc7, 0xd2, 0xff},
	color.RGBA{0xf4, 0xd9, 0x84, 0xff},
	color.RGBA{0x8a, 0xb2, 0xea, 0xff},
	color.RGBA{0xfd, 0xb5, 0x9c, 0xff},
	color.RGBA{0xee, 0xda, 0xb3, 0xff},
	color.RGBA{0xd2, 0x99, 0xa4, 0xff},
	color.RGBA{0x96, 0x92, 0xb2, 0xff},
	color.RGBA{0x9b, 0xb1, 0xd5, 0xff},
	color.RGBA{0xff, 0xe3, 0xc6, 0xff},
	color.RGBA{0xc6, 0xe2, 0xff, 0xff},
	color.RGBA{0x6a, 0x1e, 0x4f, 0xff},
	color.RGBA{0xc2, 0xa8, 0xc2, 0xff},
	color.RGBA{0xc8, 0xa2, 0xc8, 0xff},
	color.RGBA{0xc2, 0x00, 0x95, 0xff},
	color.Black }

const (
	whiteIndex = 0 // first color in palette
	blackIndex = 1 // next color in palette
)

// func main() {
// 	lissajous(os.Stdout)
// }

func Lissajous(out io.Writer, cyc int) {
	const (
		res     = 0.001 // angular resolution
		size    = 100   // image canvas covers [-size..+size]
		nframes = 64    // number of animation frames
		delay   = 8     // delay between frames in 10ms units
	)
	var cycles  = cyc   // number of complete x oscillator revolutions
	freq := rand.Float64() * 3.0 // relative frequency of y oscillator
	anim := gif.GIF{LoopCount: nframes}
	phase := 0.0 // phase difference
	for i := 0; i < nframes; i++ {
		rect := image.Rect(0, 0, 2*size+1, 2*size+1)
		img := image.NewPaletted(rect, palette)
		for t := 0.0; t < float64(cycles)*2*math.Pi; t += res {
			x := math.Sin(t)
			y := math.Sin(t*freq + phase)
			img.SetColorIndex(size+int(x*size+0.5), size+int(y*size+0.5), uint8(i%len(palette)))
		}
		phase += 0.1
		anim.Delay = append(anim.Delay, delay)
		anim.Image = append(anim.Image, img)
	}
	gif.EncodeAll(out, &anim) // NOTE: ignoring encoding errors
}
